[{"path":"https://ebukin.github.io/devPTIpack/articles/dataprep.html","id":"preparing-geometries","dir":"Articles","previous_headings":"","what":"Preparing geometries","title":"Data preparation for the PTI app","text":"TBD….","code":""},{"path":"https://ebukin.github.io/devPTIpack/articles/dataprep.html","id":"preparing-metadata","dir":"Articles","previous_headings":"","what":"Preparing Metadata","title":"Data preparation for the PTI app","text":"TBD…","code":""},{"path":"https://ebukin.github.io/devPTIpack/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eduard Bukin. Maintainer.","code":""},{"path":"https://ebukin.github.io/devPTIpack/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bukin E (2022). devPTIpack: Development environment Precise Index Targeting analysis. R package version 0.0.0.9938, https://ebukin.github.io/devPTIpack/.","code":"@Manual{,   title = {devPTIpack: Development environment for Precise Index Targeting analysis},   author = {Eduard Bukin},   year = {2022},   note = {R package version 0.0.0.9938},   url = {https://ebukin.github.io/devPTIpack/}, }"},{"path":"https://ebukin.github.io/devPTIpack/index.html","id":"devptipack","dir":"","previous_headings":"","what":"PTI package for dashboards development","title":"PTI package for dashboards development","text":"goal devPTIpack platform contains key instruments creating PTI (Project Targeting Index) dashboards well embedding PTI modules existing shiny apps. PTI offers evidence-based approach inform spatial targeting projects based country strategies objectives. See details PTI PTI dashboards Finn Masaki (2022).","code":""},{"path":"https://ebukin.github.io/devPTIpack/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation:","title":"PTI package for dashboards development","text":"add @v0.0.9 able refer specific tag. Check tags’ tree github existing tags.","code":"# Install development version from GitHub remotes::install_github(\"EBukin/devPTIpack\")  # Install specific version from GitHub remotes::install_github(\"EBukin/devPTIpack@v0.0.9\")"},{"path":"https://ebukin.github.io/devPTIpack/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"PTI package for dashboards development","text":"several ways package can used: deploy stand-along PTI apps server; embed PTI modules existing apps;","code":""},{"path":"https://ebukin.github.io/devPTIpack/index.html","id":"run-a-stand-along-pti-app","dir":"","previous_headings":"Usage","what":"Run a stand-along PTI app","title":"PTI package for dashboards development","text":"PTI apps pre-packaged form two functions. Minimum data preparation requirements must met order launch PTI using functions . need shp_dta, inp_dta app’s name. details, data preparation explained vignette(\"dataprep\"). exemplary data sets included package: geometries devPTIpack::ukr_shp metadata devPTIpack::ukr_mtdt_full. Many parameters specified devPTIpack::launch_pti(). notable : app_name - title app. Appears across multiple places app. show_waiter - TRUE/FALSE indicates weather “waiter” screen show, app launches. show_adm_levels - vector c(\"admin1\", \"admin4\") NULL, indicates admin levels map must displayed NULL available administrative levels used. shapes_path mtdtpdf_path relative absolute path zip archive shape files used mapping metadata pdf respectively. wt_dwnld_options map_dwnld_options specify data metadata download options available different places app’s interface.","code":"devPTIpack::launch_pti() devPTIpack::launch_pti_onepage() # Running PTI app with sample data library(devPTIpack) launch_pti_onepage(   shp_dta = ukr_shp,   inp_dta = ukr_mtdt_full,   app_name = \"Sample PTI\" )"},{"path":"https://ebukin.github.io/devPTIpack/index.html","id":"deploying-a-stand-along-pti-app","dir":"","previous_headings":"Usage > Run a stand-along PTI app","what":"Deploying a stand-along PTI app","title":"PTI package for dashboards development","text":"data prepare properly devPTIpack::launch_pti_onepage() works, can create dedicated folder, app’s data code can stored. needed want deploy PTI app Shiny server RStudio Connect server. create new PTI project use devPTIpack::create_new_pti(): PATH--NEW-PROJECT-LOCATION relative absolute path folder, app created. new sub-folder app created named PROJECT-NAME. typical PTI folder looks like. basic app folder created, users need populate data make minor edits. Step 1. Prepare proper metadata.xlsx shapes.rds files; Files names can anything. One specify correct paths files app.R. Step 2. Place shapes metadata app-data folder. Use app-data folder store also data archive geometrical boundaries metadata pdf documentation. Step 3. Knit metadata.Rmd order generate metadata.pdf documentation data used app. documentation based metadata.xlsx shapes.rds. Remember re-render metadata PDF whenever metadata changes. Step 4. Modify app.R file specifying paths metadata.xlsx, shapes.rds, pdf documentation archive geometrical boundaries. Change app’s name tune devPTIpack::launch_pti() function according needs. Note, inp_dta parameter devPTIpack::launch_pti() shell specified pre-loaded r object. usually generated based metadata.xlsx, use devPTIpack::fct_template_reader() (see ?devPTIpack::fct_template_reader). Step 5. Run app troubleshoot functioning. Remember, app start, likely discrepancies data preparation. Always use built-data check app launches folder. may try using devPTIpack::validate_geometries() devPTIpack::validate_metadata() check geometries metadata prepared properly. validation functions, however, exhaustive, thus, consult vignette(\"dataprep\") ask help. Step 6. Develop additional functionality folder R. Step 7. landing-page.md optional parameter may used customizing info modal pops-app launches. Fully, completed app folder may look like : app.R script, launches app used deploy app external server :","code":"devPTIpack::create_new_pti(\"PATH-TO-NEW-PROJECT-LOCATION/PROJECT-NAME\") +-- app-data |   \\-- metadata.Rmd +-- app.R +-- app-name.Rproj +-- landing-page.md \\-- R |   \\-- _disable_autoload.R +-- app-data |   +-- admin_bounds.rds |   +-- metadata.pdf |   +-- metadata.Rmd |   +-- mtdt.xlsx |   \\-- shapefiles.zip +-- app.R +-- examplePTIapp.Rproj +-- landing-page.md \\-- R     \\-- _disable_autoload.R # Launch the ShinyApp (Do not remove this comment) # To deploy, run: rsconnect::deployApp() # Or use the blue button on top of this file  library(shiny) library(devPTIpack)  launch_pti(   shp_dta = readRDS(\"app-data/admin_bounds.rds\"),   inp_dta = devPTIpack::fct_template_reader(\"app-data/mtdt.xlsx\"),   app_name = \"Example country\",    show_waiter = TRUE,    show_adm_levels = c(\"admin1\", \"admin2\"),   shapes_path = \"app-data/shapefiles.zip\",    mtdtpdf_path = \"app-data/metadata.pdf\",   pti_landing_page = \"./landing-page.md\" )"},{"path":"https://ebukin.github.io/devPTIpack/index.html","id":"embedding-pti-modules-into-existing-apps","dir":"","previous_headings":"Usage","what":"Embedding PTI modules into existing apps;","title":"PTI package for dashboards development","text":"Essentially, PTI set modules, used different combinations. devPTIpack::launch_pti_onepage() offers simple glance one key meta-module used embed PTI Shiny app. devPTIpack::mod_ptipage_newsrv() paid two available UI launched app command line. Note order module function UI, identified namespace provided id parameter. information modules, see 19 Shiny modules Mastering Shiny Modularizing Shiny app code 10 Building App {golem}. another example embedding PTI existing dashboard. runnable console necessary packages installed. Note code describe dashboard layout structure lines dedicated PTI. Remember disable waiter embedding module multitab dashboard. elaborate example multitab dashboard source code function devPTIpack::launch_pti.","code":"# Server side ?devPTIpack::mod_ptipage_newsrv  # UI side ?devPTIpack::mod_ptipage_box_ui ?devPTIpack::mod_ptipage_twocol_ui library(shiny) library(devPTIpack)  # user interface ui <- mod_ptipage_twocol_ui(id = \"pti_mod\")  # server server <- function(input, output, session) {   mod_ptipage_newsrv(id = \"pti_mod\",                      inp_dta = reactive(ukr_mtdt_full),                      shp_dta = reactive(ukr_shp),                       show_waiter = TRUE)   }  # Shiny app. shinyApp(ui, server) ## app.R ## library(shiny) library(shinydashboard) library(devPTIpack)  ui <- dashboardPage(   dashboardHeader(title = \"Basic dashboard\"),   ## Sidebar content   dashboardSidebar(     sidebarMenu(       menuItem(\"Dashboard\", tabName = \"dashboard\", icon = icon(\"dashboard\")),       menuItem(\"PTI\", tabName = \"pti\", icon = icon(\"th\"))     )   ),   ## Body content   dashboardBody(     tabItems(       # First tab content       tabItem(tabName = \"dashboard\",         fluidRow(           box(plotOutput(\"plot1\", height = 250)),            box(             title = \"Controls\",             sliderInput(\"slider\", \"Number of observations:\", 1, 100, 50)           )         )       ),        # Second tab content       tabItem(tabName = \"pti\",         fluidRow(           box(                          ### ### ### ### ### ### ## ### ### ### ### ###             ### ### ### ### ### PTI UI ### ### ### ### ###             ### ### ### ### ### ### ## ### ### ### ### ###             devPTIpack::mod_ptipage_box_ui(               id = \"pti_mod\",                map_height = \"575px\",                side_width = \"325px\",               wt_style = \"zoom:0.8;\"               ),             width = 10,             height = \"600px\"             )         )       )     )   ) )  server <- function(input, output) {   set.seed(122)   histdata <- rnorm(500)    output$plot1 <- renderPlot({     data <- histdata[seq_len(input$slider)]     hist(data)   })         ### ### ### ### ### ### ## ### ### ### ### ###   ### ### ### ### ### PTI SERVER ### ### ### ###   ### ### ### ### ### ### ## ### ### ### ### ###   mod_ptipage_newsrv(     id = \"pti_mod\",     inp_dta = reactive(ukr_mtdt_full),     shp_dta = reactive(ukr_shp),      show_waiter = TRUE     )   }  shinyApp(ui, server)"}]
